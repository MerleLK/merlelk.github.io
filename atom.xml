<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ikaros の小屋</title>
  
  <subtitle>Keep You Sane</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ikaroskun.xyz/"/>
  <updated>2020-01-26T08:06:40.209Z</updated>
  <id>https://blog.ikaroskun.xyz/</id>
  
  <author>
    <name>Ikaros Kun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 数据类 dataclasses 实践</title>
    <link href="https://blog.ikaroskun.xyz/2019/11/23/lan-python-dataclassess/"/>
    <id>https://blog.ikaroskun.xyz/2019/11/23/lan-python-dataclassess/</id>
    <published>2019-11-23T13:37:40.000Z</published>
    <updated>2020-01-26T08:06:40.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从 <code>Python3.7</code> 版本开始，引入了一个新的模块 <code>dataclasses</code>，该模块主要提供了一种数据类的数据类的实现方式。基于 <a href="https://www.python.org/dev/peps/pep-0557/" target="_blank" rel="noopener">PEP-557</a>实现。 所谓数据类，类似 <code>Java</code> 语言中的 <code>Bean</code>。通过一个容器类(class)，继而使用对象的属性访问数据。</p><p>如果你使用过标准库中的 <code>collections.namedtuple</code>, 或者 <code>typing.NamedTuple</code>，<code>dataclasses</code>是与这两者类似的。</p><p>通过 <code>dataclasses</code> 我们可以更加方便的去定义一个数据类。并且可以通过原生的方式进行类型检查。</p><p>一个基础例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryItem</span>:</span></span><br><span class="line">    <span class="string">'''Class for keeping track of an item in inventory.'''</span></span><br><span class="line">    name: str</span><br><span class="line">    unit_price: float</span><br><span class="line">    quantity_on_hand: int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total_cost</span><span class="params">(self)</span> -&gt; float:</span></span><br><span class="line">        <span class="keyword">return</span> self.unit_price * self.quantity_on_hand</span><br></pre></td></tr></table></figure><h1 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h1><p><code>dataclasses</code> 提供一个模块级的装饰器 <code>dataclass</code> 用来将类转化为数据类。该装饰器的原型定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclasses.dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)</span></span><br></pre></td></tr></table></figure><p>提供的默认参数用来控制是否生成相应的魔术方法。如 <code>repr</code> 为 <code>True</code> 时，将会自动生成 <code>__repr__</code> 方法。</p><p>我们定义一个简单的数据类，用以实现一个使用对象的属性存储实体 <code>Person</code> 数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclasses.dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name: str</span><br><span class="line">    age: int = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>该类中定义了两个属性 <code>name</code> 和 <code>age</code>。分别表示名称和年龄，并且说明 <code>name</code> 属性是一个字符串，<code>age</code> 属性是一个数字(注意： 因为 <code>Python</code> 编译器不会对此处的类型进行强制检查)，并为 <code>age</code> 属性设置了默认值 <code>20</code>。</p><p>我们可以这样去使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [1]: person = Person(<span class="string">'ikaros'</span>, 24)</span><br><span class="line"></span><br><span class="line">In [2]: person.name</span><br><span class="line">Out[2]: <span class="string">'ikaros'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为默认情况下 `repr` 是自动生成的，所以我们得到 `person` 的字符串表示。</span></span><br><span class="line">In [3]: person</span><br><span class="line">Out[3]: Person(name=<span class="string">'ikaros'</span>, age=24)</span><br></pre></td></tr></table></figure><p>通过使用 <code>field</code> 我们可以对参数做更多的定制化，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@dataclasses.dataclass</span><br><span class="line">class Person:</span><br><span class="line">    name: str</span><br><span class="line">    age: int &#x3D; dataclasses.field(default&#x3D;20, repr&#x3D;False)</span><br></pre></td></tr></table></figure><p>此处我们为 <code>age</code> 属性赋予了一个额外的 <code>repr</code> 为 <code>False</code> 的参数。该参数说明，在调用 <code>__repr__</code> 方法时，不展示 <code>age</code> 属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [4]: person</span><br><span class="line">Out[4]: Person(name=<span class="string">'ikaros'</span>)</span><br></pre></td></tr></table></figure><p>更多的 <code>field</code> 说明，可以查看 <a href="https://docs.python.org/zh-cn/3.7/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener">参考文档</a>。</p><h1 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h1><p>此处我们通过一个实际的例子展示 <code>dataclasses</code> 的用法.</p><p>现有一个数据实体内部的数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"20531316728"</span>,</span><br><span class="line">    <span class="attr">"about"</span>: <span class="string">"The Facebook Page celebrates how our friends inspire us, support us, and help us discover the world when we connect."</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"02/04/2004"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Facebook"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"facebookapp"</span>,</span><br><span class="line">    <span class="attr">"fan_count"</span>: <span class="number">214643503</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: &#123;</span><br><span class="line">        <span class="attr">"cover_id"</span>: <span class="string">"10158913960541729"</span>,</span><br><span class="line">        <span class="attr">"offset_x"</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="attr">"offset_y"</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="attr">"source"</span>: <span class="string">"https://scontent.xx.fbcdn.net/v/t1.0-9/s720x720/73087560_10158913960546729_8876113648821469184_o.jpg?_nc_cat=1&amp;_nc_ohc=bAJ1yh0abN4AQkSOGhMpytya2quC_uS0j0BF-XEVlRlgwTfzkL_F0fojQ&amp;_nc_ht=scontent.xx&amp;oh=2964a1a64b6b474e64b06bdb568684da&amp;oe=5E454425"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"10158913960541729"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过定义一个对应的数据类来表示该数据实体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>:</span></span><br><span class="line">    id: str = <span class="literal">None</span></span><br><span class="line">    about: str = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br><span class="line">    birthday: str = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br><span class="line">    name: str = <span class="literal">None</span></span><br><span class="line">    username: str = <span class="literal">None</span></span><br><span class="line">    fan_count: int = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br><span class="line">    cover: dict = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>将数据传入到数据类中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data 为 上述的数据</span></span><br><span class="line">In [5]: p = Page(**data)</span><br></pre></td></tr></table></figure><p>对数据进行操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">In [6]: p.name</span><br><span class="line">Out[6]: <span class="string">'Facebook'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串展示</span></span><br><span class="line">In [7]: p</span><br><span class="line">Out[8]: Page(id=<span class="string">'20531316728'</span>, name=<span class="string">'Facebook'</span>, username=<span class="string">'facebookapp'</span>)</span><br><span class="line"></span><br><span class="line">In [9]: p.cover</span><br><span class="line">Out[9]: </span><br><span class="line">&#123;<span class="string">'cover_id'</span>: <span class="string">'10158913960541729'</span>,</span><br><span class="line"> <span class="string">'offset_x'</span>: 50,</span><br><span class="line"> <span class="string">'offset_y'</span>: 50,</span><br><span class="line"> <span class="string">'source'</span>: <span class="string">'https://scontent.xx.fbcdn.net/v/t1.0-9/s720x720/73087560_10158913960546729_8876113648821469184_o.jpg?_nc_cat=1&amp;_nc_ohc=bAJ1yh0abN4AQkSOGhMpytya2quC_uS0j0BF-XEVlRlgwTfzkL_F0fojQ&amp;_nc_ht=scontent.xx&amp;oh=2964a1a64b6b474e64b06bdb568684da&amp;oe=5E454425'</span>,</span><br><span class="line"> <span class="string">'id'</span>: <span class="string">'10158913960541729'</span>&#125;</span><br></pre></td></tr></table></figure><p>上述完整代码参见 <a href="https://github.com/MerleLiuKun/my-python/blob/master/sundries/dataclass/demo1.py" target="_blank" rel="noopener">demo1</a> </p><p>我们在上述的代码发现, 在调用 <code>p.cover</code> 属性时，返回的是一个字典，在正常的使用时，我们是想将 <code>cover</code> 属性也声明为一个数据类。则需要对上述的代码进行修改。</p><p>添加一个 <code>Cover</code> 的数据类实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cover</span>:</span></span><br><span class="line">    id: str = <span class="literal">None</span></span><br><span class="line">    cover_id: str = <span class="literal">None</span></span><br><span class="line">    offset_x: str = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br><span class="line">    offset_y: str = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br><span class="line">    source: str = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>:</span></span><br><span class="line">    ...  <span class="comment"># 此处不再复制上方的属性</span></span><br><span class="line">    cover: Cover = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>)  <span class="comment"># 修改 `cover` 属性</span></span><br></pre></td></tr></table></figure><p>但是这时候，如果我们按照刚才的初始化方式，<code>cover</code> 属性不会被识别到。</p><p>我们可以通过添加一个额外的初始化的方法用来初始化到 <code>cover</code> 属性.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dicts_to_dataclasses</span><span class="params">(instance)</span>:</span></span><br><span class="line">    <span class="string">"""将所有的数据类属性都转化到数据类中"""</span></span><br><span class="line">    cls = type(instance)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> fields(cls):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_dataclass(f.type):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        value = getattr(instance, f.name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, dict):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        new_value = f.type(**value)</span><br><span class="line">        setattr(instance, f.name, new_value)</span><br></pre></td></tr></table></figure><p>并且修改上层数据类 <code>Page</code> 的代码，添加一个 <code>__post_init__</code> 方法， 该方法会被自动生成的 <code>__init__</code> 方法调用，进而将 <code>Cover</code> 数据类进行初始化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>:</span></span><br><span class="line">    ...  <span class="comment"># 上方的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__post_init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        dicts_to_dataclasses(self)</span><br></pre></td></tr></table></figure><p>上述完整代码参见 <a href="https://github.com/MerleLiuKun/my-python/blob/master/sundries/dataclass/demo2.py" target="_blank" rel="noopener">demo2</a></p><p>此时我们去初始化时，便可以将子数据类 <code>Cover</code> 也初始化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [10]: p.cover</span><br><span class="line">Out[10]: Cover(id=<span class="string">'10158913960541729'</span>, cover_id=<span class="string">'10158913960541729'</span>)</span><br></pre></td></tr></table></figure><p>此外，<code>dataclasses</code> 还提供了对数据类到字典的转化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [11]: from dataclasses import asdict</span><br><span class="line">In [12]: asdict(p)</span><br><span class="line">Out[12]:</span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="string">'20531316728'</span>,</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以对上边的代码进行整合一下。将通用的一些函数放到一个 <code>base</code> 基类中。</p><p>完整代码参见 <a href="https://github.com/MerleLiuKun/my-python/blob/master/sundries/dataclass/demo3.py" target="_blank" rel="noopener">demo3</a></p><h1 id="第三方增强库"><a href="#第三方增强库" class="headerlink" title="第三方增强库"></a>第三方增强库</h1><p>上边我们只是对含有嵌套字典的复杂数据进行了处理。事实上，生产中的数据的样式会更加复杂。我们根据需求自行对 <code>dicts_to_dataclasses</code> 函数进行升级处理，或者使用第三方库进行处理。</p><p>此处我们以第三方库 <code>dataclasses-json</code> 来给出一个示例，详细代码参见 <a href="https://github.com/MerleLiuKun/my-python/blob/master/sundries/dataclass/demo_with_dataclasses_json.py" target="_blank" rel="noopener">demo-with-dataclasses-json</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.kawabangga.com/posts/2959" target="_blank" rel="noopener">Python3.7 dataclass 介绍</a></li><li><a href="https://docs.python.org/zh-cn/3.7/library/dataclasses.html" target="_blank" rel="noopener">dataclasses—数据类(官方文档)</a></li><li><a href="https://github.com/lidatong/dataclasses-json" target="_blank" rel="noopener">dataclasses-json</a></li></ul>]]></content>
    
    <summary type="html">
    
      Python 数据类 dataclasses 实践
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.ikaroskun.xyz/categories/Python/"/>
    
    
      <category term="python" scheme="https://blog.ikaroskun.xyz/tags/python/"/>
    
      <category term="dataclasses" scheme="https://blog.ikaroskun.xyz/tags/dataclasses/"/>
    
  </entry>
  
  <entry>
    <title>优化你的git-commit-message</title>
    <link href="https://blog.ikaroskun.xyz/2019/08/20/tool-git-message/"/>
    <id>https://blog.ikaroskun.xyz/2019/08/20/tool-git-message/</id>
    <published>2019-08-20T11:59:03.000Z</published>
    <updated>2020-01-26T08:06:40.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>无论是写公司的项目或者是自己的项目时，总要向仓库中提交代码。每个人提交代码时写的提交信息都不一样。有随意写各种 <code>modify</code>, <code>fix</code>等简单的，还有一些比较友好，会写上自己此次提交的简介。个人觉得第二种对代码review，或者查找bug引入点时会更有帮助。</p><p>简单做个比较如下：</p><p>一、</p><p><img src="https://i.loli.net/2020/01/20/765QTkLY3jlBHgF.png" alt="formated.png"></p><p>二、<br><img src="https://i.loli.net/2020/01/20/VrKt2EXGcwjyDhC.png" alt="not_formated.png"></p><p>对比之下第一种更加清晰明了。</p><h1 id="规范-Commit-message"><a href="#规范-Commit-message" class="headerlink" title="规范 Commit message"></a>规范 Commit message</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>基本上很多团队都有自己的相关规范说明，但是目前使用的比较广泛是 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="noopener">Angular 规范</a>, 基本样式如 上文第一张图所示。</p><p>使用依据规范的 <code>Commit message</code> 会有很多好处， 比如：</p><p>(1) 提供更多的信息，方便快速浏览。</p><p>基于规范的 <code>message</code> 可以直接信息中就包含此次提交的内容。也可以基于 <code>message</code>进行过滤</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> v0.3 HEAD --grep feat</span><br></pre></td></tr></table></figure><p>(2) 可以直接根据 <code>commit</code> 生成对应的 <code>Change Log</code>.</p><h2 id="Commit-message-格式"><a href="#Commit-message-格式" class="headerlink" title="Commit message 格式"></a>Commit message 格式</h2><p>每次提交 都需要包含三部分：Header，Body 和 Footer。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>header</code>  是必须的，另外两个可以不写。</p><ul><li>标题行: 必填, 描述主要修改类型和内容</li><li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释: 放 Breaking Changes 或 Closed Issues</li></ul><p>其中 标题包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和 <code>subject</code>（必需）。</p><p>type 有以下一些常见类型：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><p>scope 说明此次变动的范围，一般视具体的项目而定。</p><p>subject 是此次提交的简要描述。</p><h1 id="工具-Commitizen"><a href="#工具-Commitizen" class="headerlink" title="工具 Commitizen"></a>工具 Commitizen</h1><p>如果我们每次手写以上的格式，必定是个痛苦的事情。所以可以使用 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">Commitizen</a><br>这个格式化工具进行撰写.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以进行全局安装或者基于某项目安装。</p><p>全局安装如下：</p><p>需要在配置文件中指定 <code>Adapter</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-conventional-changelog" &#125;'</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure><p>当然可能你喜欢的格式与某个项目下要求的格式不一致。可以在某项目下进行配置。</p><p>项目内安装：<br>需要在项目目录下配置 <code>package.json</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install -D commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line"># 以下写入package.json.</span><br><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    &quot;commit&quot;: &quot;git-cz&quot;,</span><br><span class="line">&#125;,</span><br><span class="line"> &quot;config&quot;: &#123;</span><br><span class="line">    &quot;commitizen&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;node_modules&#x2F;cz-conventional-changelog&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>需要提交代码时，执行 <code>git cz -a</code></p><p>效果如下：</p><p><img src="https://i.loli.net/2020/01/20/aUMm2kZSbBpeVX7.png" alt="commitizen.png"></p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>如果需要自行配置相关的 <code>Adapter</code>, 可以使用 <a href="https://github.com/leonardoanalista/cz-customizable" target="_blank" rel="noopener">cz-customizable</a> 进行自定义。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g cz-customizable  <span class="comment"># 全局</span></span><br><span class="line">npm i -D cz-customizable  <span class="comment"># 项目级</span></span><br></pre></td></tr></table></figure><p>修改对应的配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局 .czrc</span></span><br><span class="line">&#123; <span class="string">"path"</span>: <span class="string">"cz-customizable"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目级 (package.json)</span></span><br><span class="line"><span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"commitizen"</span>: &#123;</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"node_modules/cz-customizable"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐一下大佬的配置 <a href="https://gist.github.com/leohxj/7bc928f60bfa46a3856ddf7c0f91ab98" target="_blank" rel="noopener"> leohxj/.cz-config.js</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南-阮一峰</a></li><li><a href="https://zhuanlan.zhihu.com/p/34223150" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message-阿里南京技术专刊</a></li></ul>]]></content>
    
    <summary type="html">
    
      优化你的git-commit-message
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.ikaroskun.xyz/categories/Git/"/>
    
    
      <category term="git" scheme="https://blog.ikaroskun.xyz/tags/git/"/>
    
      <category term="commitizen" scheme="https://blog.ikaroskun.xyz/tags/commitizen/"/>
    
  </entry>
  
</feed>
